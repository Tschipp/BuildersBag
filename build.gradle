buildscript {
    repositories {
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

plugins {
  id "com.wynprice.cursemaven" version "2.1.1"
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven-publish'

apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/22e7d543a18cd30675277fbfa3669e3d9e206010/generic/secrets.gradle'

import groovy.json.JsonOutput

if (project.hasProperty('secretFile')) {
    loadSecrets(new File((String) findProperty('secretFile')))
}

group = "tschipp.buildersbag" 
archivesBaseName = "buildersbag-${minecraft_version}"
version = "${version}"

if (System.getenv('BUILD_NUMBER') != null) {
    version += "." + System.getenv('BUILD_NUMBER')
}

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "${minecraft_version}-${forge_version}"
    runDir = "run"
    mappings = mcp_mappings
	
	replace 'GRADLE:VERSION', version
}

repositories {

	maven { // Chisel, CTM
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
	
	 maven { 
		url 'https://maven.mcmoddev.com'
	}
	
	maven {
		url "https://maven.blamejared.com/"
	}
	
	maven {
		url "https://dvs1.progwml6.com/files/maven/"
	}
	
	maven {
        name = "thiakil"
        url = "https://maven.thiakil.com" //Baubles
    }
}

dependencies {
    
	deobfCompile "team.chisel.ctm:CTM:${ctm_version}" //CTM
	deobfCompile "team.chisel:Chisel:${chisel_version}" //Chisel
	compile "curse.maven:littletiles:${littletiles_version}" //LT
	compile "curse.maven:creativecore:${creativecore_version}" //Creative Core
	compile "curse.maven:chisels-bits:${chisels_and_bits_version}" //C & B
	compile "curse.maven:better-builders-wands:${bbw_version}" //Better Builder's Wands
	compile "curse.maven:building-gadgets:${buildinggadgets_version}" //Building Gadgets
	deobfCompile "tschipp.linear:linear-1.12.2:${linear_version}" //Linear
	deobfCompile "vazkii.botania:Botania:${botania_version}" //Botania
	deobfCompile "com.azanor.baubles:Baubles:${baubles_version}" //Baubles
	compile "net.darkhax.gamestages:GameStages-1.12.2:${gamestage_version}" //Gamestages
	compile "net.darkhax.itemstages:ItemStages-1.12.2:${itemstage_version}" //Itemstages
	compile "net.darkhax.orestages:OreStages-1.12.2:${orestage_version}" //Orestages
	compile "net.darkhax.bookshelf:Bookshelf-1.12.2:${bookshelf_version}" //Bookshelf
   	compile "CraftTweaker2:CraftTweaker2-MC1120-Main:${ct_version}" //Crafttweaker
   	runtime "CraftTweaker2:CraftTweaker2-MC1120-Mod-JEI:${ct_version}" //Crafttweaker-JEI compat

}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft_version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        expand 'version':project.version, 'mcversion':project.minecraft_version
    }
        
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    description = 'Creates a JAR containing the source code.'
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    description = 'Creates a JAR containing the JavaDocs.'
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task deobfJar(type: Jar) {
    description = 'Creates a JAR containing the non-obfuscated compiled code.'
    from sourceSets.main.output
    classifier = "deobf"
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives deobfJar
}

publishing {

    publications {

        mavenJava(MavenPublication) {

            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java

            // Allows the maven pom file to be modified.
            pom.withXml {

                // Go through all the dependencies.
                asNode().dependencies.dependency.each { dep ->

                    println 'Surpressing artifact ' + dep.artifactId.last().value().last() + ' from maven dependencies.'
                    assert dep.parent().remove(dep)
                }
            }

            artifact sourcesJar {

                classifier 'sources'
            }
            artifact javadocJar {

                classifier 'javadoc'
            }
            artifact deobfJar {

                classifier 'deobf'
            }
        }
    }

    repositories {

        maven {

            url "file://" + System.getenv("local_maven")
        }
    }
}

task signJar(type: SignJar, dependsOn: reobfJar) {

    // Skips if the keyStore property is missing.
    onlyIf {
        project.hasProperty('modkeyStore')
    }

    // findProperty allows us to reference the property without it existing. 
    // Using project.propName would cause the script to fail validation if 
    // the property did not exist. 
    keyStore = project.findProperty('modkeyStore')
    alias = project.findProperty('modkeyStoreAlias')
    storePass = project.findProperty('modkeyStorePass')
    keyPass = project.findProperty('modkeyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

// Runs this task automatically when build is ran. 
build.dependsOn signJar


