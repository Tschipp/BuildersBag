buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
		maven { url = 'https://repo.spongepowered.org/maven' }
		maven { url = 'https://maven.parchmentmc.org' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
		classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
		classpath 'org.parchmentmc:librarian:1.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/22e7d543a18cd30675277fbfa3669e3d9e206010/generic/secrets.gradle'

//import net.minecraftforge.gradle.common.task.SignJar                      
import groovy.json.JsonSlurper                       
import groovy.json.JsonOutput

if (project.hasProperty('secretFile')) {
    loadSecrets(new File((String) findProperty('secretFile')))
}

version = "${version}"
group = "tschipp.buildersbag"
archivesBaseName = "buildersbag-${minecraft_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)


if (System.getenv('BUILD_NUMBER') != null) {
    version += "." + System.getenv('BUILD_NUMBER')
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'parchment', version: "${mapping_version}-${minecraft_version}"
   
    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                buildersbag {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                buildersbag {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                buildersbag {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
	
	mavenCentral()
	
	maven { // Chisel, CTM
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
	
	 maven { 
		url 'https://maven.mcmoddev.com'
	}
	
	maven {
		url "https://maven.blamejared.com/"
	}
	
	maven {
		url "https://dvs1.progwml6.com/files/maven/"
	}
	
	maven {
        name = "thiakil"
        url = "https://maven.thiakil.com" //Baubles
    }
	
	//Baubles
	maven {
		url 'https://jitpack.io'
	}
	
	//Cursemaven
	repositories {
    maven {
        url "https://www.cursemaven.com"
    }
	
	maven {
        url = "https://maven.theillusivec4.top/" //curios
    }
}
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

	implementation fg.deobf("team.chisel.ctm:CTM:${ctm_version}") //CTM
	//deobfCompile "team.chisel:Chisel:${chisel_version}" //Chisel //not yet available
	//compile "curse.maven:littletiles:${littletiles_version}" //LT //not yet available
	//compile "curse.maven:creativecore:${creativecore_version}" //Creative Core //not yet available
	implementation fg.deobf("curse.maven:chisels-bits-231095:${chisels_and_bits_version}") //C & B
	//compile "curse.maven:better-builders-wands:${bbw_version}" //Better Builder's Wands //not yet available
	implementation fg.deobf("curse.maven:building-gadgets-298187:${buildinggadgets_version}") //Building Gadgets
	//deobfCompile "tschipp.linear:linear-1.16.4:${linear_version}" //Linear //not yet available
	implementation fg.deobf("vazkii.botania:Botania:${botania_version}") //Botania
	implementation fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}") //Patchouli
	runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}") //curios
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api") //curios
	implementation fg.deobf("com.github.lazyMods:Baubles:${baubles_version}:api") //Baubles 
	implementation fg.deobf("net.darkhax.gamestages:GameStages-1.16.4:${gamestage_version}") //Gamestages
	//compile "net.darkhax.itemstages:ItemStages-1.16.4:${itemstage_version}" //Itemstages //not yet available
	//compile "net.darkhax.orestages:OreStages-1.16.4:${orestage_version}" //Orestage //not yet available
	implementation fg.deobf("net.darkhax.bookshelf:Bookshelf-1.16.4:${bookshelf_version}") //Bookshelf
    //compile fg.deobf("com.blamejared.crafttweaker:CraftTweaker-1.16.4:${ct_version}") //Crafttweaker
	//compile "org.jgrapht:jgrapht-core:1.5.1"
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "buildersbag",
            "Specification-Vendor": "Builder's Bag",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Builder's Bag",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar') 

task sourcesJar(type: Jar, dependsOn: classes) {
    description = 'Creates a JAR containing the source code.'
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    description = 'Creates a JAR containing the JavaDocs.'
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task deobfJar(type: Jar) {
    description = 'Creates a JAR containing the non-obfuscated compiled code.'
    from sourceSets.main.output
    classifier = "deobf"
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives deobfJar
}


publishing {

    publications {

        mavenJava(MavenPublication) {

            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java

            // Allows the maven pom file to be modified.
            pom.withXml {

                // Go through all the dependencies.
                asNode().dependencies.dependency.each { dep ->

                    println 'Surpressing artifact ' + dep.artifactId.last().value().last() + ' from maven dependencies.'
                    assert dep.parent().remove(dep)
                }
            }

            artifact sourcesJar {

                classifier 'sources'
            }
            artifact javadocJar {

                classifier 'javadoc'
            }
            artifact deobfJar {

                classifier 'deobf'
            }
        }
    }

    repositories {

        maven {

            url "file://" + System.getenv("local_maven")
        }
    }
}

/*
task signJar(type: SignJar, dependsOn: jar) {
    // Skips if the keyStore property is missing.
    onlyIf {
        project.hasProperty('modkeyStore')
    }

    // findProperty allows us to reference the property without it existing. 
    // Using project.propName would cause the script to fail validation if 
    // the property did not exist. 
    keyStore = project.findProperty('modkeyStore')
    alias = project.findProperty('modkeyStoreAlias')
    storePass = project.findProperty('modkeyStorePass')
    keyPass = project.findProperty('modkeyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

// Runs this task automatically when build is ran. 
build.dependsOn signJar
*/